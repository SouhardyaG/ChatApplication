import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.PrintWriter;

import javax.swing.*;
import java.awt.Font;
import java.awt.BorderLayout;
import java.awt.event.*;
import java.net.Socket;

public class Client extends JFrame{

    Socket socket;

    BufferedReader read;
    PrintWriter write;

    //Declare Components

    private JLabel heading = new JLabel("Client Area");
    private JTextArea messageArea = new JTextArea();
    private JTextField messageInput = new JTextField();
    private Font font = new Font("Dialog", Font.PLAIN, 20);

    //Constructor
    public Client() {
        try {
            System.out.println("Sending Request to Server...");
            socket = new Socket("127.0.0.1", 7860);
            System.out.println("Connection Done.");

            read = new BufferedReader(new InputStreamReader((socket.getInputStream())));
            write = new PrintWriter(socket.getOutputStream());

            createGUI();
            events();
            startReading();
            //startWriting();


        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void createGUI(){
        //GUI code
        this.setTitle("Client Area");
        this.setSize(600, 700);
        this.setLocationRelativeTo(null);
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        heading.setFont(font);
        messageArea.setFont(font);
        messageInput.setFont(font);

        heading.setIcon(new ImageIcon("chat-logo-design_93835-108.jpg"));
        heading.setHorizontalAlignment(SwingConstants.CENTER);
        heading.setHorizontalTextPosition(SwingConstants.CENTER);
        heading.setVerticalTextPosition(SwingConstants.BOTTOM);
        heading.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
        messageArea.setEditable(false);

        this.setLayout(new BorderLayout());

        //Adding the components to the frame
        this.add(heading, BorderLayout.NORTH);
        JScrollPane jScrollPane = new JScrollPane(messageArea);
        this.add(messageArea, BorderLayout.CENTER);
        this.add(messageInput, BorderLayout.SOUTH);

    }

    private void events(){

        messageInput.addKeyListener(new keyListener(){

            @Override
            public void keyTyped(KeyEvent e){

            }
            @Override
            public  void keyPressed(KeyEvent e){

            }
            @Override
            public void keyReleased(KeyEvent e) {
                //System.out.println("Key Released : "  + e.getKeyCode());
                if (e.getKeyCode() == 10) {
                    //System.out.println("You have Pressed Enter button");
                    String outMessage = messageInput.getText();
                    messageArea.append("Me : " + outMessage + "\n");
                    write.println(outMessage);
                    write.flush();
                    messageInput.setText("");
                    messageInput.requestFocus();
                }
            }
        });
    }

    //start Reading
    public void startReading() {
    //thread -  will read the data consistently

        Runnable threadRead = () -> { //thread for reading code
            System.out.println("Reading Started ... ");
            try {
                while (true) {

                    String incomingMessage = null;
                    incomingMessage = read.readLine();

                    if (incomingMessage.toLowerCase().equals("bye")) {
                        System.out.println("Server Left the chat");
                        JOptionPane.showMessageDialog(this, "Server Terminated the Chat");
                        messageInput.setEnabled(false);
                        socket.close();
                        break;
                    }

                    //System.out.println("Server : " + incomingMessage);
                    messageArea.append("Server : " + incomingMessage + "\n");
                }

            } catch (Exception e) {
                //e.printStackTrace();
                System.out.println("Connection Terminated");
            }

        };
        new Thread(threadRead).start();
    }


    //start Writing
    /*public void startWriting() {
        //thread - will take data from user and send it to client
        Runnable threadWrite = () -> { //thread for writing code
            System.out.println("Writer Started ...");
            try {
                while (true) {
                    //System.out.print("Me : ");
                    BufferedReader consoleMessage = new BufferedReader(new InputStreamReader(System.in));
                    String outgoingMessage = consoleMessage.readLine();
                    write.println(outgoingMessage);
                    write.flush();

                    if (outgoingMessage.toLowerCase().equals("bye")) {
                        socket.close();
                        break;
                    }
                }
                //System.out.println("Connection Terminated");
            } catch (Exception e) {
                //e.printStackTrace();
                System.out.println("Connection Terminated");
            }
        };
        new Thread(threadWrite).start();
    }*/


    public static void main(String[] args) {
        System.out.println("Hello from Client ...");
        new Client();
    }
}